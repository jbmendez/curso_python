#!/usr/bin/env python3
"""
Prueba JDBC espec√≠fica con tus datos reales de IBM i Series.
Usando la misma configuraci√≥n que funciona en DBeaver.
"""

import sys
import os

# Agregar el directorio src al path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), 'src')))

from src.domain.entities.conexion import Conexion
from src.infrastructure.services.ibmiseries_selector import IBMiSeriesConexionSelector

def probar_jdbc_real():
    """Prueba JDBC con los datos reales de IBM i Series."""
    
    print("=" * 60)
    print("üöÄ PRUEBA JDBC - CONFIGURACI√ìN REAL IBM i SERIES")
    print("=" * 60)
    
    # Usar tus datos reales
    conexion = Conexion(
        nombre="IBM i Production",
        tipo_motor="ibmiseries",
        servidor="172.20.0.10",      # Tu servidor real
        puerto=0,                  # Puerto SSL (igual que DBeaver)
        base_datos="*LIBL",          # Bibliotecas por defecto
        usuario="jmendez",           # Tu usuario real
        contrase√±a="barbiet9",       # Tu contrase√±a real
        driver_type="jdbc"           # Forzar JDBC como DBeaver
    )
    
    print(f"Servidor: {conexion.servidor}:{conexion.puerto}")
    print(f"Usuario: {conexion.usuario}")
    print(f"Driver: {conexion.driver_type} (igual que DBeaver)")
    print(f"Base datos: {conexion.base_datos}")
    print("-" * 60)
    
    # Crear selector
    selector = IBMiSeriesConexionSelector()
    
    print("\nüîÑ Conectando con JDBC (mismo protocolo que DBeaver)...")
    
    # Probar conexi√≥n
    resultado = selector.probar_conexion(conexion)
    
    print("\nüìã RESULTADO:")
    if resultado.exitosa:
        print("‚úÖ ¬°CONEXI√ìN JDBC EXITOSA!")
        print(f"   Mensaje: {resultado.mensaje}")
        print(f"   Tiempo: {resultado.tiempo_respuesta:.2f}s")
        if resultado.version_servidor:
            print(f"   Versi√≥n servidor: {resultado.version_servidor}")
        if resultado.detalles_error:
            print(f"   Informaci√≥n adicional: {resultado.detalles_error}")
    else:
        print("‚ùå CONEXI√ìN JDBC FALL√ì")
        print(f"   Mensaje: {resultado.mensaje}")
        if resultado.detalles_error:
            print(f"   Detalles: {resultado.detalles_error}")
        print(f"   Tiempo: {resultado.tiempo_respuesta:.2f}s" if resultado.tiempo_respuesta else "   Tiempo: N/A")
    
    print("\n" + "=" * 60)
    
    return resultado.exitosa

def probar_auto_deteccion():
    """Prueba auto-detecci√≥n (deber√≠a elegir JDBC autom√°ticamente)."""
    
    print("\nü§ñ PRUEBA AUTO-DETECCI√ìN")
    print("-" * 40)
    
    conexion = Conexion(
        nombre="IBM i Auto",
        tipo_motor="ibmiseries", 
        servidor="172.20.0.10",
        puerto=446,
        base_datos="*LIBL",
        usuario="jmendez",
        contrase√±a="barbiet9",
        driver_type="auto"  # Auto-detecci√≥n
    )
    
    selector = IBMiSeriesConexionSelector()
    resultado = selector.probar_conexion(conexion)
    
    print(f"Resultado auto-detecci√≥n: {resultado.exitosa}")
    print(f"Mensaje: {resultado.mensaje}")
    
    return resultado.exitosa

def main():
    """Funci√≥n principal."""
    print("üéØ Probando JDBC con configuraci√≥n real...")
    
    # Probar JDBC espec√≠ficamente
    jdbc_ok = probar_jdbc_real()
    
    # Probar auto-detecci√≥n
    auto_ok = probar_auto_deteccion()
    
    print("\n" + "=" * 60)
    print("üìä RESUMEN FINAL")
    print("=" * 60)
    
    if jdbc_ok:
        print("üéâ ¬°JDBC FUNCIONA PERFECTAMENTE!")
        print("   - Mismo protocolo que DBeaver")
        print("   - Conexi√≥n exitosa a IBM i Series")
        print("   - Sistema completamente operativo")
        print("\n‚úÖ PR√ìXIMOS PASOS:")
        print("   1. Usa la GUI: py main_gui.py")
        print("   2. Configura driver_type='jdbc' o 'auto'")
        print("   3. El sistema funcionar√° igual que DBeaver")
    else:
        print("‚ö†Ô∏è  JDBC no conect√≥ - posibles causas:")
        print("   1. Servidor IBM i no accesible")
        print("   2. Credenciales incorrectas")
        print("   3. Firewall bloqueando puerto 446")
        print("   4. Servicio SQL no activo en IBM i")
        
    print("=" * 60)

if __name__ == "__main__":
    main()