#!/usr/bin/env python3
"""
Test para verificar que las notificaciones manejan correctamente los l√≠mites de caracteres
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.infrastructure.services.notification_service import WindowsNotificationService
import time

def test_notificaciones_con_limites():
    """Test para verificar l√≠mites de caracteres en notificaciones"""
    
    notification_service = WindowsNotificationService()
    
    print("üß™ Testing notification character limits...")
    
    # Test 1: Control con nombre muy largo
    control_largo = "Control_de_verificacion_de_datos_completos_con_validacion_extendida_y_procesamiento_avanzado_que_excede_los_limites_normales"
    print(f"\n1. Testing control con nombre largo ({len(control_largo)} chars):")
    print(f"   Nombre: {control_largo}")
    
    result1 = notification_service.mostrar_control_disparado(
        control_nombre=control_largo,
        filas_procesadas=150,
        tiempo_ejecucion_ms=2500,
        mensaje_adicional="Este es un mensaje adicional que tambi√©n puede ser muy largo y causar problemas de visualizaci√≥n"
    )
    print(f"   Resultado: {'‚úÖ Exitoso' if result1 else '‚ùå Fall√≥'}")
    
    time.sleep(3)
    
    # Test 2: Mensaje de error muy largo
    error_muy_largo = "Error cr√≠tico en la base de datos: La consulta SQL fall√≥ debido a un problema de conectividad con el servidor principal, timeout en la conexi√≥n secundaria, validaci√≥n de datos inconsistente, y m√∫ltiples intentos de reconexi√≥n que han resultado en un estado de deadlock irreversible que requiere intervenci√≥n manual inmediata del administrador del sistema para restablecer la funcionalidad completa del motor de controles"
    print(f"\n2. Testing error con mensaje largo ({len(error_muy_largo)} chars):")
    print(f"   Error: {error_muy_largo[:100]}...")
    
    result2 = notification_service.mostrar_control_error(
        control_nombre="Control_con_error_critico",
        error_mensaje=error_muy_largo,
        tiempo_ejecucion_ms=5000
    )
    print(f"   Resultado: {'‚úÖ Exitoso' if result2 else '‚ùå Fall√≥'}")
    
    time.sleep(3)
    
    # Test 3: Resumen con n√∫meros grandes
    print(f"\n3. Testing resumen con n√∫meros grandes:")
    result3 = notification_service.mostrar_resumen_ejecucion(
        total_controles=9999,
        controles_disparados=8888,
        controles_error=111,
        tiempo_total_ms=123456.789
    )
    print(f"   Resultado: {'‚úÖ Exitoso' if result3 else '‚ùå Fall√≥'}")
    
    time.sleep(3)
    
    # Test 4: Control con mensaje adicional extremadamente largo
    mensaje_adicional_largo = "Este es un mensaje adicional que contiene una cantidad excesiva de informaci√≥n detallada sobre el proceso de ejecuci√≥n del control, incluyendo estad√≠sticas completas, detalles de rendimiento, informaci√≥n de configuraci√≥n, y m√∫ltiples advertencias y observaciones que normalmente no cabr√≠an en una notificaci√≥n est√°ndar de Windows y que podr√≠an causar problemas de truncamiento o errores de visualizaci√≥n en el sistema operativo"
    print(f"\n4. Testing control con mensaje adicional muy largo ({len(mensaje_adicional_largo)} chars):")
    
    result4 = notification_service.mostrar_control_disparado(
        control_nombre="Control_Normal",
        filas_procesadas=50,
        tiempo_ejecucion_ms=1200,
        mensaje_adicional=mensaje_adicional_largo
    )
    print(f"   Resultado: {'‚úÖ Exitoso' if result4 else '‚ùå Fall√≥'}")
    
    time.sleep(3)
    
    # Test 5: Test de l√≠mites extremos
    print(f"\n5. Testing l√≠mites extremos:")
    result5 = notification_service.mostrar_control_disparado(
        control_nombre="A" * 200,  # Nombre de 200 caracteres
        filas_procesadas=999999999,
        tiempo_ejecucion_ms=999999.999,
        mensaje_adicional="B" * 500  # Mensaje de 500 caracteres
    )
    print(f"   Resultado: {'‚úÖ Exitoso' if result5 else '‚ùå Fall√≥'}")
    
    # Resultados finales
    total_tests = 5
    exitosos = sum([result1, result2, result3, result4, result5])
    print(f"\nüìä Resultados finales:")
    print(f"   Tests exitosos: {exitosos}/{total_tests}")
    print(f"   Tests fallidos: {total_tests - exitosos}/{total_tests}")
    
    if exitosos == total_tests:
        print("‚úÖ Todos los tests de l√≠mites pasaron correctamente!")
    else:
        print("‚ö†Ô∏è Algunos tests fallaron. Revisar implementaci√≥n de l√≠mites.")
    
    return exitosos == total_tests

if __name__ == "__main__":
    test_notificaciones_con_limites()